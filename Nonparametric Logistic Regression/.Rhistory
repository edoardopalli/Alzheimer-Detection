T.boot_cv <- as.vector(T.boot_cv)
mse_smooth=var(T.boot_cv)+(point_cv-mean(T.boot_cv))^2
fit_smooth$lambda
for (b in 1:B){
y.boot <- fitted_cv + sample(residuals_cv,n,replace=T)
model_spline_boot <-smooth.spline(y=y.boot,x=height.b,lambda = opt.lam)
T.boot_cv[b]<- predict(model_spline_boot,simoni)$y
}
set.seed(100)
T.boot_cv= numeric(B)
for (b in 1:B){
y.boot <- fitted_cv + sample(residuals_cv,n,replace=T)
model_spline_boot <-smooth.spline(y=y.boot,x=height.b,lambda = opt.lam)
T.boot_cv[b]<- predict(model_spline_boot,simoni)$y
}
mse_smooth=var(T.boot_cv)+(point_cv-mean(T.boot_cv))^2
var(T.boot_cv)
point_cv-mean(T.boot_cv)
mean(T.boot_cv)
point_cv
bias_pred_smooth
point_cv=predict(fit_smooth_spline_CV,simoni)$y
# pointwise prediction of the height at 25 of Dr. Simoniâ€™s kid
pred_smooth_simoni$y
variance_pred_smooth
var(T.boot_cv)
fit_prova=predict(fit_smooth_spline_CV,height.b)$y
residuals_cv = height.25-fit_prova
n <-100
B=200
set.seed(100)
T.boot_cv= numeric(B)
simoni <- 58
for (b in 1:B){
y.boot <- fitted_cv + sample(residuals_cv,n,replace=T)
model_spline_boot <-smooth.spline(y=y.boot,x=height.b,lambda = opt.lam)
T.boot_cv[b]<- predict(model_spline_boot,simoni)$y
}
mse_smooth=var(T.boot_cv)+(point_cv-mean(T.boot_cv))^2
fit_prova=predict(fit_smooth_spline_CV,height.b)$y
residuals_cv = height.25-fit_prova
n <-100
B=200
T.boot_cv= numeric(B)
simoni <- 58
mse_smooth=var(T.boot_cv)+(point_cv-mean(T.boot_cv))^2
set.seed(100)
T.boot_cv= numeric(B)
simoni <- 58
for (b in 1:B){
y.boot <- fitted_cv + sample(residuals_cv,n,replace=T)
model_spline_boot <-smooth.spline(y=y.boot,x=height.b,lambda = opt.lam)
T.boot_cv[b]<- predict(model_spline_boot,simoni)$y
}
mse_smooth=var(T.boot_cv)+(point_cv-mean(T.boot_cv))^2
B=200
set.seed(100)
T.boot_cv= numeric(B)
simoni <- 58
for (b in 1:B){
y.boot <- fitted_cv + sample(residuals_cv,n,replace=T)
model_spline_boot <-smooth.spline(y=y.boot,x=height.b,lambda = opt.lam)
T.boot_cv[b]<- predict(model_spline_boot,simoni)$y
}
var(T.boot_cv)
point_cv-mean(T.boot_cv)
point_cv
mean(T.boot_cv)
mean(boot_smooth)
library(conformalInference)
opt = fit_smooth_spline_CV$df
opt
train_ss=function(x,y,out=NULL){
smooth.spline(x,y,df=opt) #output
}
predict_ss=function(obj, new_x){
predict(obj,new_x)$y #output
}
pippo=train_ss(height.b,height.25)
predict_ss(pippo,height.b)
X.grid=seq(range(height.b)[1],range(height.b)[2],length.out=100)
alpha= 0.05
c_preds=conformal.pred(height.b,height.25,X.grid,alpha,verbose=T,train.fun = train_ss ,predict.fun = predict_ss,num.grid.pts = 100)
c_preds=conformal.pred.split(height.b,height.25,X.grid,alpha,verbose=T,train.fun = train_ss ,predict.fun = predict_ss)
plot(height.b,height.25,cex =.5, col =" darkgrey ")
lines(X.grid,c_preds$pred ,lwd =2, col ="red",lty=3)
plot(height.b,height.25,cex =.5, col =" darkgrey ")
lines(X.grid,c_preds$pred ,lwd =2, col ="red",lty=3)
matlines(X.grid ,cbind(c_preds$up,c_preds$lo) ,lwd =1, col =" blue",lty =3)
c_preds$up,c_preds$lo
cbind(c_preds$up,c_preds$lo)
c_preds=conformal.pred.split(height.b,height.25,58,alpha,verbose=T,train.fun = train_ss ,predict.fun = predict_ss)
cbind(c_preds$up,c_preds$lo)
c_preds$pred
options(rgl.debug= T)
library(rgl)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_hooks$set(webgl = hook_webgl)
ggplot2::theme_set(ggplot2::theme_bw())
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
setwd("C:/Users/franc/Desktop/NONPA/PROGETTO")
library(stringr)
dataset_old <- read.csv("oasis_longitudinal.csv")
head(dataset_old)
colnames(dataset_old)
## DEMENTI
dataset_old$ID = str_sub(dataset_old$Subject.ID,-3)
dementi_prima <- dataset_old[dataset_old$Group=='Demented'& dataset_old$Visit==1,]
dementi_prima$status <- 2
dementi_prima$group_new <- 'Demented'
##NON DEMENTI
nondementi_last <- dataset_old[dataset_old$Group=='Nondemented',]
nondementi_last <-nondementi_last%>%group_by(ID)%>% mutate(max_visit=max(Visit))%>%ungroup()%>% filter(Visit==max_visit)
length(unique(nondementi_last$ID))
nondementi_last$status<-1
nondementi_last$group_new <- 'Nondemented'
## CONVERTED
converted_first <- dataset_old[dataset_old$Group=='Converted'&dataset_old$CDR >0,]
converted_first <-converted_first%>%group_by(ID)%>% mutate(min_visit=min(Visit))%>%ungroup()%>% filter(Visit==min_visit)
converted_first$group_new <- 'Demented'
converted_first$status <- 2
#ALL TOGETHER
dataset <- rbind(nondementi_last[,-17],dementi_prima,converted_first[,-17])
dataset$time_y <- dataset$MR.Delay / 365
dataset$status_fact <- factor(dataset$Group)
colnames(dataset) <- c( "Subject.ID",  "MRI.ID"   ,   "Group"   ,    "Visit"   ,    "time" , "M.F"       ,  "Hand" , "age"     ,    "EDUC"   ,     "SES"  ,       "MMSE"     ,   "CDR"     ,    "eTIV"    ,    "nWBV"   ,   "ASF"  ,       "ID"     ,     "status"   ,   "group_new"  , "time_y"    ,  "status_fact")
fit <- survfit(Surv(dataset$time, status==2) ~ 1, data = dataset)
# status==1 -> when the event occurred
summary(fit)
surv_median(fit)
# median = 1331 -> median time of event
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=360,
title="Kaplan-Meier Curve for Alzheimer Survival")
dataset$sex <- 0
dataset$sex[which(dataset$M.F=='F')] <-1
fit.sex <- survfit(Surv(time, status) ~ sex, data=dataset)
ggsurvplot(fit.sex, conf.int = T,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=360,
legend.title="SEX",  legend.labs=c('M','F'),
palette=c("darkblue","red"),
title="Kaplan-Meier Curves by gender class for Alzheimer Survival")
log_rank_test <- survdiff(Surv(time, status) ~ sex,data=dataset)
log_rank_test
cox.age.sex <- coxph(Surv(time_y, status) ~ age + sex, data = dataset)
cox.age.sex
summary(cox.age.sex)
plot(survfit(cox.age.sex, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability wrt Age')
plot(survfit(mod.cox_age_sex, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability')
cols=  brewer.pal(3, "RdPu")
cols=  brewer.pal(3, "RdPu")
library(RColorBrewer)
cols=  brewer.pal(3, "RdPu")
plot(survfit(cox.age.sex, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability wrt Age and Gender')
grid()
plot(survfit(cox.age.sex, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability wrt Age and Gender')
grid()
library(RColorBrewer)
cols <- brewer.pal(3, "RdPu")
plot(survfit(cox.age, data=dataset),
col=cols, lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability')
cox.age <- coxph(Surv(time_y, status) ~ age, data = dataset)
cox.age
library(RColorBrewer)
cols <- brewer.pal(3, "RdPu")
plot(survfit(cox.age, data=dataset),
col=cols, lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability')
grid()
library(RColorBrewer)
cols <- brewer.pal(3, "RdPu")
plot(survfit(cox.age, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability')
grid()
cox.age.sex <- coxph(Surv(time_y, status) ~ age + sex, data = dataset)
cox.age.sex
summary(cox.age.sex)
cols=  brewer.pal(3, "RdPu")
library(RColorBrewer)
plot(survfit(cox.age.sex, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability wrt Age and Gender')
grid()
mod.cox <- coxph(Surv(time, status) ~ age + sex + EDUC + MMSE, data =  dataset)
summary(mod.cox)
mod.cox_age_sex <- coxph(Surv(time, status) ~ age + sex , data =  dataset)
summary(mod.cox_age_sex)
plot(survfit(mod.cox_age_sex, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability')
grid()
mod.cox_MMSE <- coxph(Surv(time, status) ~ MMSE , data =  dataset)
summary(mod.cox_MMSE)
plot(survfit(mod.cox_MMSE, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability')
plot(survfit(mod.cox_ALL, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability')
mod.cox_ALL <- coxph(Surv(time, status) ~ age + sex + EDUC + MMSE+ SES + eTIV, data =  dataset)
summary(mod.cox_ALL)
plot(survfit(mod.cox_ALL, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability')
grid()
ggcoxdiagnostics(mod.cox_ALL, type = "martingale" ,labels='ALL')
ggcoxdiagnostics(mod.cox_ALL, type = "deviance" ,labels='ALL')
mod.cox.strata <- coxph(Surv(time, status) ~ age + sex + strata(MMSE) , data =  dataset)
summary(mod.cox.strata)
test.ph.strata <- cox.zph(mod.cox.strata)
test.ph.strata
mod.cox.strata_ALL <- coxph(Surv(time, status) ~  age + sex + EDUC + strata(MMSE)+ SES + eTIV, data =  dataset)
summary(mod.cox.strata_ALL)
test.ph.strata_ALL <- cox.zph(mod.cox.strata_ALL)
test.ph.strata_ALL
hist(dataset[sex=='0'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age of Converted in Alzheimer Data', col="darkblue",bin=10)
hist(dataset[sex=='1'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age of Convertein Alzheimer Data', col="red")
dataset$sex <- 0
dataset$sex[which(dataset$M.F=='F')] <-1
fit.sex <- survfit(Surv(time, status) ~ sex, data=dataset)
ggsurvplot(fit.sex, conf.int = T,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=360,
legend.title="SEX",  legend.labs=c('M','F'),
palette=c("darkblue","red"),
title="Kaplan-Meier Curves by gender class for Alzheimer Survival")
hist(dataset[sex=='0'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age of Converted in Alzheimer Data', col="darkblue",bin=10)
attach(dataset)
hist(dataset[sex=='0'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age of Converted in Alzheimer Data', col="darkblue",bin=10)
hist(dataset[sex=='1'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age of Convertein Alzheimer Data', col="red")
hist(dataset$age, xlab='Age [years]', main='Histogram of  age in Alzheimer Data')
hist(dataset[Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age of Converted Female in Alzheimer Data', col="red")
pie(table(dataset$status),col=cols[1:2])
pie(table(dataset$group_new),col=cols[1:2])
pie(table(dataset$group_new),col=cols[2:3])
pie(table(dataset$M.F),col=cols[2:3])
pie(table(dataset$Hand),col=cols[2:3])
pie(table(dataset$age),col=cols[2:3])
unique(dataset$Group)
pie(table(dataset$Group),col=cols)
ggplot(data=dataset,aes(x=ID,y=time_y)) +
geom_bar(stat='identity',width=0.2) +
geom_point(aes(color=cols,shape=status_fact),size=6) +
coord_flip()
ggplot(data=dataset,aes(x=ID,y=time_y)) +
geom_bar(stat='identity',width=0.2) +
geom_point(aes(color=status_fact,shape=status_fact),size=6) +
coord_flip()
cols<- ('red','blue','green')
pie(table(dataset$Group),col=cols)
cols<- c('red','blue','green')
pie(table(dataset$Group),col=cols)
cols<- c('red','green','blue')
pie(table(dataset$Group),col=cols)
cols<- c('red','#39ba2d','blue')
pie(table(dataset$Group),col=cols)
cols<- c('#ef756c','#39ba2d','#6b9eff')
pie(table(dataset$Group),col=cols)
table(dataset$Group)
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/franc/Desktop/NONPA/TDE')
load('boyheight.rda')
library(splines)
fit_smooth_spline_CV <- smooth.spline(x=height.b,y=height.25,cv = TRUE)
opt_lam=fit_smooth_spline_CV$lambda
point.pred <- predict(fit_smooth_spline_CV,newdata=list(height.b=point.obs))$y
fitted.obs <- predict(fit_smooth_spline_CV,newdata=data.frame(height.b))$y
res.obs <- height.25 -fitted.obs
point.obs <- 58
point.pred <- predict(fit_smooth_spline_CV,newdata=list(height.b=point.obs))$y
B=1000
T.boot = numeric(B)
set.seed(2022)
for (b in 1:B) {
Y.boot <- fitted.obs + sample(res.obs, replace = T)
fit_boot <-
smooth.spline(x=height.b,y=Y.boot,lambda=opt_lam)
T.boot[b] = predict(fit_boot, newdata = list(height.b =point.obs))$y
}
predict(fit_boot, newdata = list(height.b =point.obs))
point.obs <- 58
predict(fit_smooth_spline_CV,newdata=list(height.b=point.obs))
point.pred <- predict(fit_smooth_spline_CV,point.obs)$y
T.boot = numeric(B)
set.seed(2022)
for (b in 1:B) {
Y.boot <- fitted.obs + sample(res.obs, replace = T)
fit_boot <-
smooth.spline(x=height.b,y=Y.boot,lambda=opt_lam)
T.boot[b] = predict(fit_boot, point.obs)$y
}
(variance_pred <- var(T.boot))
(bias_pred <- preds_sim-mean(T.boot))
(variance_pred <- var(T.boot))
(bias_pred <- point.pred-mean(T.boot))
(MSE_pred <- variance_pred +bias_pred^2)
set.seed(100)
T.boot = numeric(B)
set.seed(100)
for (b in 1:B) {
Y.boot <- fitted.obs + sample(res.obs, replace = T)
fit_boot <-
smooth.spline(x=height.b,y=Y.boot,lambda=opt_lam)
T.boot[b] = predict(fit_boot, point.obs)$y
}
#MSE
(variance_pred <- var(T.boot))
(bias_pred <- point.pred-mean(T.boot))
(MSE_pred <- variance_pred +bias_pred^2)
predict(fit_smooth_spline_CV,point.obs)
(bias_pred <- point.pred-mean(T.boot))
#MSE
(variance_pred <- var(T.boot))
B = 1000
res.obs <- model_spline$residuals
fitted.obs <- predict(fit_smooth_spline_CV,newdata=data.frame(height.b))$y
fitted.obs <- predict(fit_smooth_spline_CV,data.frame(height.b))$y
fitted.obs <- predict(fit_smooth_spline_CV,height.b=data.frame(height.b))$y
fitted.obs <- predict(fit_smooth_spline_CV,height.b)$y
options(rgl.debug=T)
setwd('C:/Users/franc/Desktop/NONPA/LAB_ NONPARAM/COPIE DA GITHUB/Block II - Nonparametric Inference')
load('parallel_gate_data/parallel_gate.rda')
head(chrono)
#convert athlete to factor
chrono$athlete=factor(chrono$athlete)
summary(chrono)
attach(chrono)
boxplot(reaction_time ~ athlete)
model_norm=aov(reaction_time ~ athlete)
summary(model_norm)
shapiro.test(model_norm$residuals)
qqnorm(model_norm$residuals)
T0 <- summary(model_norm)[[1]][1,4]
summary(model_norm)
summary(model_norm)[[1]][1,4]
pooled1=chrono[athlete!=2,]
n1=nrow(pooled1)
ath_3=pooled1$athlete==3
T0=abs(mean(pooled1$reaction_time[ath_3])-mean(pooled1$reaction_time[!ath_3]))
T_stat=numeric(B)
for(perm in 1:B){
# permutation:
permutation <- sample(1:n1)
time_perm <- pooled1$reaction_time[permutation]
ref_perm <- time_perm[ath_3]
other_perm <- time_perm[!ath_3]
# test statistic:
T_stat[perm] <- abs(mean(other_perm) - mean(ref_perm))
}
p_val <- sum(T_stat>=T0)/B
p_val
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/franc/Desktop/NONPA/TDE')
dataset <-readRDS('milk_samples_2.Rds')
model_gam=gam(Native_pH ~ s(wave_70,bs='cr') + s(wave_300,bs='cr')+s(I(wave_70*wave_300),bs='cr'),data = dataset) # 'ts'
library(mgcv.)
library(mgcv)
model_gam=gam(Native_pH ~ s(wave_70,bs='cr') + s(wave_300,bs='cr')+s(I(wave_70*wave_300),bs='cr'),data = dataset) # 'ts'
table_fit_gam <- summary(model_gam)
summary(model_gam)
table_fit_gam$p.t
table_fit_gam$p.table
model_gam_semi=gam(Native_pH ~ s(wave_70,bs='cr') + wave_300,data = dataset)
T.obs<- summary(model_gam_semi)$p.table[2,1]
summary(model_gam_semi)
library(fda)
setwd('C:/Users/franc/Desktop/NONPA/TDE')
dataset <-readRDS('milk_samples_3.Rds')
setwd('C:/Users/franc/Desktop/NONPA/TDE')
dataset <-readRDS('milk_samples_3.Rds')
View(dataset)
setwd('C:/Users/franc/Desktop/NONPA/PROGETTO/ALZHEIMER_prognonpa/EDOARDO')
torte <-  read.csv2('oasis_longitudinal.csv', sep=',')
data<- read.csv2('data.csv', sep=',')
dataset<- read.csv2('oasis_cross-sectional.csv', sep=',')
data<- na.omit(data)
library('caret')
library(conformalClassification)
library('randomForest')
# library('conformal')
# install.packages('conformal')
algorithm <- "rf"
trControl <- trainControl(method = "cv",  number=5,savePredictions=TRUE)
set.seed(3)
head(data)
data$LABEL <-1
data$LABEL[which(data$CDR>0)] <- 2
data_sample<- data[, c(2,3,4,5,6,7,9,10,11)]
data_train <- cbind(data$LABEL,data_sample)
train_n= nrow(data_train)*0.75
data_test <- data_train[162:216,]
data_train <- data_train[1:162,]
pValues <- ICPClassification(data_train,data_test)
CPCalibrationPlot(pValues, data_test, "blue")
CPEfficiency(pValues,data_test$`data$LABEL`,0.05) #0.2727273
CPErrorRate(pValues,data_test$`data$LABEL`,0.05) #0.07272727
CPValidity(pValues,data_test$`data$LABEL`) #0.444126
CPObsFuzziness(pValues,data_test$`data$LABEL`)  #0.07995061
setwd('C:/Users/franc/Desktop/NONPA/PROGETTO/ALZHEIMER_prognonpa/EDOARDO')
train<- read.csv2('train.csv', sep=',')
test<- read.csv2('test.csv', sep=',')
index <- seq(1,100)
pValues <- as.data.frame(pValues)
pValues$V3 <- 1-pValues$V1-pValues$V2
ppp <- t(pValues)
library(RColorBrewer)
cols <- brewer.pal(3, "RdPu")
colnames(ppp)<- as.character(index)
rownames(ppp) <- c('NonDemented','Demented', '-')
x11()
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlab=rownames(ppp[,1:10]),ylab='pvalues')
setwd('C:/Users/franc/Desktop/NONPA/PROGETTO/ALZHEIMER_prognonpa/EDOARDO')
train<- read.csv2('train.csv', sep=',')
test<- read.csv2('test.csv', sep=',')
library('caret')
library(conformalClassification)
library('randomForest')
# library('conformal')
# install.packages('conformal')
algorithm <- "rf"
trControl <- trainControl(method = "cv",  number=5,savePredictions=TRUE)
set.seed(3)
head(data)
attach(data)
data <- rbind(train,test)
#data$LABEL <- rbind(train$LABEL,test$LABEL)
train$LABEL <-ifelse(train$label=='Dem',2,1)
test$LABEL <-ifelse(test$label=='Dem',2,1)
#data$LABEL[which(data$CDR>0)] <- 2
data_train <- cbind(train$LABEL,train[,3:7])
data_test <- cbind(test$LABEL,test[,3:7])
pValues <- ICPClassification(data_train,data_test)
pValues <- as.matrix(pValues)
CPCalibrationPlot(pValues, data_test, "blue")
CPEfficiency(pValues,data_test$`test$LABEL`,0.05) #0.95
CPErrorRate(pValues,data_test$`test$LABEL`,0.05) #0.16
CPValidity(pValues,data_test$`test$LABEL`) #0.8082079
CPObsFuzziness(pValues,data_test$`test$LABEL`)  #0.5652324
index <- seq(1,100)
pValues <- as.data.frame(pValues)
pValues$V3 <- 1-pValues$V1-pValues$V2
ppp <- t(pValues)
library(RColorBrewer)
cols <- brewer.pal(3, "RdPu")
colnames(ppp)<- as.character(index)
rownames(ppp) <- c('NonDemented','Demented', '-')
x11()
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlab=rownames(ppp[,1:10]),ylab='pvalues')
legend('topright', legend=rownames(ppp))
x11()
barplot(ppp[,1:10], col= cols, xlab=rownames(ppp[,1:10]),ylab='pvalues')
legend('topright', legend=rownames(ppp))
x11()
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlab=rownames(ppp[,1:10]),ylab='pvalues',args.legend = list(x = "topright",
inset = c(- 0.15, 0)))
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlab=rownames(ppp[,1:10]),ylab='pvalues',args.legend = list(x = "topright",
inset = c(- 0.15, 0)))
index <- seq(1,100)
pValues <- as.data.frame(pValues)
pValues$V3 <- 1-pValues$V1-pValues$V2
ppp <- t(pValues)
library(RColorBrewer)
cols <- brewer.pal(3, "RdPu")
colnames(ppp)<- as.character(index)
rownames(ppp) <- c('NonDemented','Demented', '-')
x11()
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlab=rownames(ppp[,1:10]),ylab='pvalues',args.legend = list(x = "topright",
inset = c(- 0.15, 0)))
legend('topright', legend=rownames(ppp))
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlab=rownames(ppp[,1:10]),ylab='pvalues',args.legend = list(x = "topright",
inset = c(- 0.15, 0)))
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlab=rownames(ppp[,1:10]),ylab='pvalues',args.legend = list(x = "topright"))
x11()
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlab=rownames(ppp[,1:10]),ylab='pvalues',args.legend = list(x = "topright"))
