B <- 1000
seed <- 2022
set.seed(seed)
N <- 20
library(dplyr)
library(DepthProc)
library(aplpack)
library(ggplot2)
library(conformalInference)
library(splines)
library(progress)
library(pbapply)
library(fda)
library(survival)
library(survminer)
B <- 1000
seed <- 2022
set.seed(seed)
N <- 20
milk1 <- readRDS('milk_samples_1.Rds')
head(milk1)
milk_scaled <- scale(milk1[,-4])
milk_scaled <- data.frame(milk_scaled)
milk_scaled$pasteurization_type <- ifelse(milk1$pasteurization_type=='Pasteurized', 1,2)
groups=split(milk_scaled, milk_scaled$pasteurization_type)
med1=depthMedian(groups$'1',depth_params = list(method='Tukey'))
med2=depthMedian(groups$'2',depth_params = list(method='Tukey'))
t0= max(abs(med2-med1))
n <- dim(milk_scaled)[1]
n1=table(milk1$pasteurization_type)[1]
n2=table(milk1$pasteurization_type)[2]
tstat=numeric(B)
set.seed(seed)
for (b in 1:B){
perm=sample(1:n)
milk_scaled.p=milk_scaled[perm,]
med1.p=depthMedian(milk_scaled.p[1:n1,], list(method='Tukey'))
med2.p=depthMedian(milk_scaled.p[(n1+1):n,], list(method='Tukey'))
tstat[b]=max(abs(med2.p-med1.p))
}
# Plot the empirical cumulative distribution function of the permutational test statistic,
# report the p-value of the test and comment it.
groups=split(milk_scaled, milk_scaled$pasteurization_type)
med1=depthMedian(groups$'1',depth_params = list(method='Tukey'))
med2=depthMedian(groups$'2',depth_params = list(method='Tukey'))
t0= max(abs(med2-med1))
n <- dim(milk_scaled)[1]
n1=table(milk1$pasteurization_type)[1]
n2=table(milk1$pasteurization_type)[2]
tstat=numeric(B)
pb=progress::progress_bar$new(total=B, format = " Processing [:bar] :percent eta: :eta")
set.seed(seed)
for (b in 1:B){
perm=sample(1:n)
milk_scaled.p=milk_scaled[perm,]
med1.p=depthMedian(milk_scaled.p[1:n1,], list(method='Tukey'))
med2.p=depthMedian(milk_scaled.p[(n1+1):n,], list(method='Tukey'))
tstat[b]=max(abs(med2.p-med1.p))
pb$tick()
}
# Plot the empirical cumulative distribution function of the permutational test statistic,
# report the p-value of the test and comment it.
plot(ecdf(tstat))
abline(v=t0, col=3)
t0
plot(ecdf(tstat), xlim=c(0, t0))
abline(v=t0, col=3)
plot(ecdf(tstat), xlim=c(0, t0))
abline(v=t0, col=3, pch=19)
plot(ecdf(tstat), xlim=c(0, t0))
abline(v=t0, col=3, phc=19)
plot(ecdf(tstat), xlim=c(0, t0))
abline(v=t0, col=3, pch=19)
plot(ecdf(tstat), xlim=c(0, t0))
lines(v=t0, col=3, pch=19)
plot(ecdf(tstat), xlim=c(0, t0))
lines(x=t0, col=3, pch=19)
plot(ecdf(tstat), xlim=c(0, t0+1))
lines(x=t0, col=3, pch=19)
plot(ecdf(tstat), xlim=c(0, t0))
abline(v=t0, col=3, pch=19)
pval=sum(tstat>=t0)/B
pval
fit <- survfit(Surv(time, spoiled==2) ~ pasteurization_type, data = milk_scaled)
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Milk spoiling")
fit <- survfit(Surv(time, spoiled) ~ pasteurization_type, data = milk_scaled)
fit <- survfit(Surv(time, spoiled==2) ~ pasteurization_type, data = milk_scaled)
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Milk spoiling")
surv_median(fit)
log_rank_test <- survdiff(Surv(time, spoiled) ~  pasteurization_type, data = milk_scaled)
data <- data.frame(milk1$time, milk1$spoiled, milk1$pasteurization_type)
colnames(data) <- c('time', 'spoiled', 'type')
fit <- survfit(Surv(time, spoiled) ~ type, data = data)
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
conf.int = T,
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Milk spoiling")
data <- data.frame(milk1$time, milk1$spoiled, milk1$pasteurization_type)
colnames(data) <- c('time', 'spoiled', 'type')
fit <- survfit(Surv(time, spoiled) ~ type, data = data)
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
conf.int = T,
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=90,
title="Kaplan-Meier Curve for Milk spoiling")
#prediction
surv_median(fit)
log_rank_test <- survdiff(Surv(time, spoiled) ~ type, data = data)
log_rank_test
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
conf.int = T,
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
#break.time.by=90,
title="Kaplan-Meier Curve for Milk spoiling")
cox.milk <- coxph(Surv(time, spoiled) ~ type, data = data)
cox.mlk
cox.milk <- coxph(Surv(time, spoiled) ~ type, data = data)
cox.milk
summary(cox.milk)
gold <- c(6, 174, 7)
fit.milk <- survfit(cox.milk, newdata = gold)
gold <- data.frame(c(6, 174, 7))
fit.milk <- survfit(cox.milk, newdata = gold)
B <- 1000
seed <- 2022
set.seed(seed)
N <- 20
B <- 1000
seed <- 2022
set.seed(seed)
N <- 20
milk3 <- readRDS('milk_samples_3.Rds')
head(milk3)
dim(milk3)
pairs(milk3)
library(robustbase)
N <- 341
nsamp <- 1000
fit_MCD <- covMcd(x = milk3, alpha = .75, nsamp = nsamp)
fit_MCD
fit_MCD$raw.center
fit_MCD$raw.mah
fit_MCD$raw.cnp2
fit_MCD$raw.weights
fit_MCD$raw.cov
library(robustbase)
NN <- 341
nsamp <- 1000
fit_MCD <- covMcd(x = milk3, alpha = .75, nsamp = nsamp)
fit_MCD
fit_MCD$raw.center
fit_MCD$raw.cov
ind_best_subset <- fit_MCD$best
N <- nrow(milk3)
p <- ncol(milk3)
plot(milk3, col=ifelse(1:N%in%ind_best_subset,"black","red"),pch=19)
dplyr::near(fit_MCD$raw.center,colMeans(milk3[ind_best_subset,]))
dplyr::near(fit_MCD$raw.cov,cov(milk3[ind_best_subset,])*prod(fit_MCD$raw.cnp2))
h <- fit_MCD$quan
dplyr::near(fit_MCD$raw.cnp2[1],(h/N)/pchisq(qchisq(p = h/N,df = p),df = p+2))
plot(fit_MCD, classic=TRUE, labels.id=FALSE, which="distance")
plot(fit_MCD,labels.id=FALSE,which=c("dd"))
plot(fit_MCD, classic=TRUE, labels.id=FALSE)
plot(fit_MCD)
library(MASS)
alpha <- 0.75
fit_lts <- ltsReg(kappa_casein~wave_280, alpha=alpha,mcd=TRUE,data=milk3)
summary(fit_lts)
plot(milk3)
abline(fit_lts, col="darkgreen", lwd=2)
plot(milk3$wave_280, milk3$kappa_casein)
abline(fit_lts, col="darkgreen", lwd=2)
plot(fit_lts)
best_lts <- fit_lts$best
plot(milk3, col=ifelse(1:N%in%best_lts,"black","red"),pch=19)
plot(fit_lts)
plot(milk3$wave_280, milk3$kappa_casein, col=ifelse(1:N%in%best_lts,"black","red"),pch=19)
abline(fit_lts, col="darkgreen", lwd=2)
library(robustbase)
NN <- 341
nsamp <- 1000
fit_MCD <- covMcd(x = milk3[,1:3], alpha = .75, nsamp = nsamp)
fit_MCD
library(robustbase)
NN <- 341
nsamp <- 1000
N <- nrow(milk3)
p <- ncol(milk3)
alpha1 <- (N-41)/N
fit_MCD <- covMcd(x = milk3[,1:3], alpha = alpha1, nsamp = nsamp)
fit_MCD
library(robustbase)
NN <- 341
set.seed(2022)
nsamp <- 1000
N <- nrow(milk3)
p <- ncol(milk3)
alpha1 <- (N-41)/N
fit_MCD <- covMcd(x = milk3[,1:3], alpha = alpha1, nsamp = nsamp)
fit_MCD
fit_MCD$raw.center
fit_MCD$raw.cov
ind_best_subset <- fit_MCD$best
plot(milk3, col=ifelse(1:N%in%ind_best_subset,"black","red"),pch=19)
plot(fit_MCD, classic=TRUE, labels.id=FALSE, which="distance")
indout <- setdiff(1:N, fit_MCD$best)
indout
library(MASS)
alpha <- 0.75
fit_lts <- ltsReg(kappa_casein~wave_280, alpha=alpha,mcd=TRUE,data=milk3)
summary(fit_lts)
plot(milk3$wave_280, milk3$kappa_casein, col=ifelse(1:N%in%best_lts,"black","red"),pch=19)
abline(fit_lts, col="darkgreen", lwd=2)
library(DepthProc)
library(splines)
library(mgcv)
library(pbapply)
library(gam)
library(rgl)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_hooks$set(webgl = hook_webgl)
setwd('C:/Users/Elena/Desktop/Elena/Polimi/MAGISTRALE/Nonparametric statistics/Progetto/github repository/ALZHEIMER_prognonpa/Elena')
dataset_xsectional <- read.csv("oasis_cross-sectional.csv", header = T)
dataset_longitudinal <- read.csv("oasis_longitudinal.csv", header = T)
library(DepthProc)
library(aplpack)
bagplot_matrix <- aplpack::bagplot.pairs(dataset_longitudinal[,c(8,9,11,13,14,15)], main = 'Pairs of bagplots')  # bagplot dimension by dimension
depthContour(
data.frame(dataset_longitudinal$Age, dataset_longitudinal$MMSE),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags1 <- bagplot(data.frame(dataset_longitudinal$Age, dataset_longitudinal$MMSE), xlab = "Age", ylab = "MMSE")
outlying_obs1 <- bags1$pxy.outlier
outlying_obs1
which(dataset_longitudinal$Age==outlying_obs1[,1] & dataset_longitudinal$MMSE==outlying_obs1[,2])
depthContour(
data.frame(dataset_longitudinal$EDUC, dataset_longitudinal$MMSE),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags2 <- bagplot(  data.frame(dataset_longitudinal$EDUC, dataset_longitudinal$MMSE), xlab = "EDUC", ylab = "MMSE")
outlying_obs2 <- bags2$pxy.outlier
outlying_obs2
which(dataset_longitudinal$EDUC==outlying_obs2[,1] & dataset_longitudinal$MMSE==outlying_obs2[,2])
depthContour(
data.frame(dataset_longitudinal$eTIV, dataset_longitudinal$MMSE),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags3 <- bagplot(data.frame(dataset_longitudinal$eTIV, dataset_longitudinal$MMSE), xlab = "eTIV", ylab = "MMSE")
outlying_obs3 <- bags3$pxy.outlier
outlying_obs3
which(dataset_longitudinal$eTIV==outlying_obs3[,1] & dataset_longitudinal$MMSE==outlying_obs3[,2])
depthContour(
data.frame(dataset_longitudinal$nWBV, dataset_longitudinal$MMSE),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags4 <- bagplot(data.frame(dataset_longitudinal$nWBV, dataset_longitudinal$MMSE), xlab = "nWBV", ylab = "MMSE")
outlying_obs4 <- bags4$pxy.outlier
outlying_obs4
which(dataset_longitudinal$nWBV==outlying_obs4[,1] & dataset_longitudinal$MMSE==outlying_obs4[,2])
depthContour(
data.frame(dataset_longitudinal$ASF, dataset_longitudinal$MMSE),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags5 <- bagplot(data.frame(dataset_longitudinal$ASF, dataset_longitudinal$MMSE), xlab = "ASF", ylab = "MMSE")
outlying_obs5 <- bags5$pxy.outlier
outlying_obs5
which(dataset_longitudinal$ASF==outlying_obs5[,1] & dataset_longitudinal$MMSE==outlying_obs5[,2])
depthContour(
data.frame(dataset_longitudinal$Age,dataset_longitudinal$EDUC ),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags6 <- bagplot(data.frame(dataset_longitudinal$Age,dataset_longitudinal$EDUC ), xlab = "Age", ylab = "EDUC")
outlying_obs6 <- bags6$pxy.outlier
outlying_obs6
which(dataset_longitudinal$Age==outlying_obs6[,1] & dataset_longitudinal$EDUC==outlying_obs6[,2])
depthContour(
data.frame(dataset_longitudinal$eTIV, dataset_longitudinal$EDUC),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags7 <- bagplot(data.frame(dataset_longitudinal$eTIV, dataset_longitudinal$EDUC), xlab = "eTIV", ylab = "EDUC")
outlying_obs7 <- bags7$pxy.outlier
outlying_obs7
which(dataset_longitudinal$eTIV==outlying_obs7[,1] & dataset_longitudinal$EDUC==outlying_obs7[,2])
depthContour(
data.frame(dataset_longitudinal$nWBV, dataset_longitudinal$EDUC),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags8 <- bagplot(data.frame(dataset_longitudinal$nWBV, dataset_longitudinal$EDUC), xlab = "nWBV", ylab = "EDUC")
outlying_obs8 <- bags8$pxy.outlier
outlying_obs8
which(dataset_longitudinal$nWBV==outlying_obs8[,1] & dataset_longitudinal$EDUC==outlying_obs8[,2])
depthContour(
data.frame(dataset_longitudinal$ASF, dataset_longitudinal$EDUC),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags9 <- bagplot(data.frame(dataset_longitudinal$ASF, dataset_longitudinal$EDUC), xlab = "ASF", ylab = "EDUC")
outlying_obs9 <- bags9$pxy.outlier
outlying_obs9
which(dataset_longitudinal$ASF==outlying_obs9[,1] & dataset_longitudinal$EDUC==outlying_obs9[,2])
depthContour(
data.frame(dataset_longitudinal$Age, dataset_longitudinal$eTIV),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags10 <- bagplot(data.frame(dataset_longitudinal$Age, dataset_longitudinal$eTIV), xlab = "Age", ylab = "eTIV")
outlying_obs10 <- bags10$pxy.outlier
outlying_obs10
which(dataset_longitudinal$Age==outlying_obs10[,1] & dataset_longitudinal$eTIV==outlying_obs10[,2])
dataset_train <- read.csv("train.csv", header = T)
dataset_train <- dataset_train[,-1]
dataset_train$L <- ifelse(dataset_train$label == 'Dem', 1, 0)  # dummy variable for demented/nondemented
head(dataset_train)
bagplot_matrix_train <- aplpack::bagplot.pairs(dataset_train[,c(-1,-7,-8, -9)])
depthContour(
data.frame(dataset_train$Age, dataset_train$eTIV),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags1_train <- bagplot(data.frame(dataset_train$Age, dataset_train$eTIV), xlab = "Age", ylab = "eTIV")
outlying_obs1_train <- bags1_train$pxy.outlier
outlying_obs1_train
which(dataset_train$Age==outlying_obs1_train[1,1] & dataset_train$eTIV==outlying_obs1_train[1,2])
which(dataset_train$Age==outlying_obs1_train[2,1] & dataset_train$eTIV==outlying_obs1_train[2,2])
depthContour(
data.frame(dataset_train$Age, dataset_train$nWBV),
depth_params = list(method = 'Tukey'),
points = TRUE,
colors = colorRampPalette(c('white', 'navy')),
levels = 10,
pdmedian = F,
graph_params = list(cex=.01, pch=1),
pmean = F
)
bags2_train <- bagplot(data.frame(dataset_train$Age, dataset_train$nWBV), xlab = "Age", ylab = "nWBV")
outlying_obs2_train <- bags2_train$pxy.outlier
outlying_obs2_train
which(dataset_train$Age==outlying_obs2_train[,1] & dataset_train$nWBV==outlying_obs2_train[,2])
